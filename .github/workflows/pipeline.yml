name: Deploy

on:
  push:
    branches:
      - main

env:
  REGION_DEFAULT: us-east-1
  CLUSTER_NAME: EKS-fastfood

jobs:

  deploy:
    name: Deploying Infra k8s and App
    runs-on: ubuntu-latest

    environment: # Define a configuração de ambiente para este job
      name: AWS       

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      # Restaurar o estado do Terraform - Infra k8s
      - name: Restore Terraform State - Infra k8s
        run: |
          echo "Checking for existing state file for Infra k8s..."
          if [ -f $GITHUB_WORKSPACE/eks-fastfood/terraform.tfstate ]; then
            echo "Restoring terraform state for Infra k8s..."
            cp $GITHUB_WORKSPACE/eks-fastfood/terraform.tfstate eks-fastfood/terraform.tfstate
          else
            echo "No existing terraform state for Infra k8s. Starting fresh."
          fi

      - name: Terraform Init - Infra k8s
        working-directory: eks-fastfood
        run: terraform init -reconfigure

      - name: Terraform Plan - Infra k8s
        working-directory: eks-fastfood
        run: terraform plan -out=tfplan

      - name: Terraform Apply - Infra k8s
        working-directory: eks-fastfood
        run: terraform apply -auto-approve tfplan

      # Salvar o estado do Terraform - Infra k8s
      - name: Save Terraform State - Infra k8s
        run: |
          echo "Saving terraform state for Infra k8s..."
          cp eks-fastfood/terraform.tfstate $GITHUB_WORKSPACE/eks-fastfood/terraform.tfstate

      # Esperar o cluster EKS estar ativo
      - name: Wait for EKS Cluster to be available
        run: |
          echo "Waiting for EKS cluster to be ACTIVE..."
          while true; do
            STATUS=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --query 'cluster.status' --output text)
            echo "Cluster status: $STATUS"
            if [ "$STATUS" == "ACTIVE" ]; then
              echo "Cluster is ACTIVE. Proceeding..."
              break
            else
              echo "Cluster not ready. Waiting 30 seconds..."
              sleep 30
            fi
          done

      # Restaurar o estado do Terraform - App
      - name: Restore Terraform State - App
        run: |
          echo "Checking for existing state file for App..."
          if [ -f $GITHUB_WORKSPACE/app-fastfood/terraform.tfstate ]; then
            echo "Restoring terraform state for App..."
            cp $GITHUB_WORKSPACE/app-fastfood/terraform.tfstate app-fastfood/terraform.tfstate
          else
            echo "No existing terraform state for App. Starting fresh."
          fi

      - name: Terraform Init - App
        working-directory: app-fastfood
        run: terraform init -reconfigure

      - name: Terraform Plan - App
        working-directory: app-fastfood
        run: terraform plan -out=tfplan

      - name: Terraform Apply - App
        working-directory: app-fastfood
        run: terraform apply -auto-approve tfplan

      # Salvar o estado do Terraform - App
      - name: Save Terraform State - App
        run: |
          echo "Saving terraform state for App..."
          cp app-fastfood/terraform.tfstate $GITHUB_WORKSPACE/app-fastfood/terraform.tfstate
